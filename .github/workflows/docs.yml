# Workflow 名称
name: Build and Deploy Documentation

# 触发工作流程的事件
on:
  push:
    # 当推送到 main 分支时触发
    branches:
      - main
    # 可选：只在 docs 或 src 目录下的文件发生变化时触发，可以节省资源
    # paths:
    #   - 'docs/**'
    #   - 'src/**'

# 定义一个或多个工作 (jobs)
jobs:
  build_and_deploy:
    # 作业名称
    name: Build and Deploy Docs
    # 运行作业的虚拟机环境
    runs-on: ubuntu-latest

    # 赋予作业所需的权限，用于部署到 GitHub Pages
    permissions:
      contents: write   # 允许写入仓库内容 (包括推送分支)
      pages: write      # 允许写入 Pages 部署
      id-token: write   # 用于 OIDC，Pages 部署需要

    # 作业步骤
    steps:
      # 步骤 1: 拉取代码
      - name: Checkout code
        uses: actions/checkout@v4

      # 步骤 2: 设置 Python 环境
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x' # 使用最新的 Python 3 版本

      # 步骤 3: 安装项目依赖 (包括 Sphinx 和主题)
      # 假设 sphinx 和主题在 requirements.txt 中
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          # 如果您有单独的 docs/requirements.txt，可以使用：
          # pip install -r docs/requirements.txt

      # 步骤 4: 构建 Sphinx 文档
      # 切换到 docs 目录并运行 make html
      - name: Build documentation
        run: |
          cd docs
          make html

      # 步骤 5: 部署文档到 GitHub Pages
      # 使用 peaceiris/actions-gh-pages action 部署构建好的 HTML
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3 # 或 v4，v3 兼容性较好
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }} # GitHub 提供的默认 token
          publish_dir: docs/build/html # Sphinx 构建输出的 HTML 目录
          publish_branch: gh-pages      # 目标分支，GitHub Pages 将从这里读取文件
          destination_dir: .            # 将 HTML 文件发布到 gh-pages 分支的根目录
